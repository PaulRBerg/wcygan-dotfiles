# Create a string of random base64 characters (default length 64)
rng() {
  local length="${1:-64}"
  head -c "$length" /dev/urandom | base64
}

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# Run `dig` and display the most useful info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer;
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}…";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# exec into a pod
kx() {
  kubectl exec -it $1 -- /bin/sh
}

# yolo commit and push
send-it() {
  git add . && git commit -m "x" && git push
}

# Go to main branch and get latest code
mm() {
    local main_branch=$(git rev-parse --abbrev-ref HEAD)
    if [[ "$main_branch" != "main" && "$main_branch" != "master" ]]; then
        main_branch=$(git remote show origin | sed -n '/HEAD branch/s/.*: //p')
    fi
    git stash && git checkout $main_branch && git pull --rebase origin $main_branch
}

# Open the listed files or directories in Visual Studio Code
open_in_vscode() {
    if [ $# -eq 0 ]; then
        echo "Usage: open_in_vscode <directory_or_file> [<directory_or_file> ...]"
        return 1
    fi

    for item in "$@"; do
        if [ -e "$item" ]; then
            code "$item"
        else
            echo "Warning: '$item' does not exist. Skipping."
        fi
    done
}

echo "functions loaded"