name: Maintenance

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: "0 2 * * *"
  workflow_dispatch: # Allow manual triggering

jobs:
  dependency-updates:
    name: Check Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Check for Deno updates
        run: |
          echo "Current Deno version:"
          deno --version

          echo "Checking for latest Deno version..."
          LATEST=$(curl -s https://api.github.com/repos/denoland/deno/releases/latest | jq -r .tag_name)
          echo "Latest Deno version: $LATEST"

      - name: Validate current setup
        run: |
          deno task check
          echo "✅ All TypeScript files type-check successfully"

      - name: Test installation in clean environment
        run: |
          # Quick smoke test
          TEST_HOME=$(mktemp -d)
          export HOME="$TEST_HOME"
          export USER="maintenance-test"

          deno task install:force

          echo "✅ Installation completed successfully in clean environment"

          # Cleanup
          rm -rf "$TEST_HOME"

  health-check:
    name: Repository Health Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check repository structure
        run: |
          echo "Checking essential files..."

          ESSENTIAL_FILES=(
            "install-safely.ts"
            "rollback.ts"
            "integration-test.ts"
            "deno.json"
            ".zshrc"
            ".bash_profile"
            ".aliases"
            ".functions"
            ".exports"
            ".path"
            ".extra"
            ".vimrc"
            "README.md"
          )

          for file in "${ESSENTIAL_FILES[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ $file exists"
            else
              echo "❌ $file missing"
              exit 1
            fi
          done

      - name: Check README freshness
        run: |
          # Check if README mentions current year
          CURRENT_YEAR=$(date +%Y)
          if grep -q "$CURRENT_YEAR" README.md; then
            echo "✅ README appears current"
          else
            echo "⚠️ README may need updating for $CURRENT_YEAR"
          fi

      - name: Validate shell configurations
        run: |
          echo "Checking shell configuration syntax..."

          # Basic syntax check for shell files
          bash -n .bash_profile && echo "✅ .bash_profile syntax OK"

          # Check for common issues
          if grep -q "export.*=" .exports; then
            echo "✅ .exports has export statements"
          else
            echo "⚠️ .exports may be missing export statements"
          fi

  create-issue-on-failure:
    name: Create Issue on Failure
    runs-on: ubuntu-latest
    needs: [dependency-updates, health-check]
    if: failure()
    steps:
      - name: Create issue
        uses: actions/github-script@v7
        with:
          script: |
            const title = `Maintenance Check Failed - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            ## Maintenance Check Failure

            The automated maintenance check failed on ${new Date().toISOString()}.

            **Failed Jobs:**
            - Dependency Updates: ${{ needs.dependency-updates.result }}
            - Health Check: ${{ needs.health-check.result }}

            **Action Required:**
            Please review the [workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId}) for details.

            **Common Issues:**
            - Deno version compatibility
            - Missing or corrupted dotfiles
            - Dependency updates needed
            - Shell configuration syntax errors

            This issue was automatically created by the maintenance workflow.
            `;

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['maintenance', 'automated']
            });
