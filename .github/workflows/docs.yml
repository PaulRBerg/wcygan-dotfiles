name: Documentation

on:
  push:
    paths:
      - '**.md'
      - 'install-safely.ts'
      - 'rollback.ts'
      - 'deno.json'
  pull_request:
    paths:
      - '**.md'

jobs:
  validate-docs:
    name: Validate Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js for markdown tools
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install markdown tools
        run: |
          npm install -g markdownlint-cli
          npm install -g markdown-link-check

      - name: Lint markdown files
        run: |
          markdownlint README.md || true
          echo "✅ Markdown linting completed"

      - name: Check markdown links
        run: |
          markdown-link-check README.md --config .github/markdown-link-check.json || true
          echo "✅ Link checking completed"

      - name: Validate README structure
        run: |
          echo "Checking README.md structure..."
          
          REQUIRED_SECTIONS=(
            "Quick Installation"
            "Testing"
            "Rollback Support"
            "What Gets Installed"
            "Customization"
          )
          
          for section in "${REQUIRED_SECTIONS[@]}"; do
            if grep -q "$section" README.md; then
              echo "✅ Section '$section' found"
            else
              echo "⚠️ Section '$section' missing or renamed"
            fi
          done

      - name: Check code examples in README
        run: |
          echo "Validating code examples..."
          
          # Check that README mentions current Deno tasks
          if grep -q "deno task install" README.md; then
            echo "✅ README mentions deno task install"
          else
            echo "⚠️ README may be missing deno task examples"
          fi
          
          if grep -q "deno task test" README.md; then
            echo "✅ README mentions deno task test"
          else
            echo "⚠️ README may be missing deno task test examples"
          fi

  update-usage-stats:
    name: Update Usage Statistics
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Generate statistics
        run: |
          echo "Generating repository statistics..."
          
          # Count lines of code
          TOTAL_LINES=$(find . -name "*.ts" -o -name "*.sh" -o -name ".*rc" -o -name ".*profile" | xargs wc -l | tail -1 | awk '{print $1}')
          echo "Total lines of configuration: $TOTAL_LINES"
          
          # Count dotfiles
          DOTFILE_COUNT=$(find . -maxdepth 1 -name ".*" -type f | wc -l)
          echo "Number of dotfiles: $DOTFILE_COUNT"
          
          # Count Deno tasks
          TASK_COUNT=$(jq '.tasks | length' deno.json)
          echo "Number of Deno tasks: $TASK_COUNT"
          
          # Save stats to file
          cat > .github/stats.json << EOF
          {
            "generated": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "total_lines": $TOTAL_LINES,
            "dotfile_count": $DOTFILE_COUNT,
            "task_count": $TASK_COUNT
          }
          EOF

      - name: Commit statistics
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'docs: update repository statistics [skip ci]'
          file_pattern: '.github/stats.json'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 